use std::str::FromStr;
use crate::ast::*;

grammar;

pub FructoseScript: Module = ModuleItem* => Module {
  items: <>,
};

ModuleItem: ModuleItem = {
  Statement => ModuleItem::Statement(<>),
};

Statement: Statement = {
  Let => Statement::Let(<>),
  Assign => Statement::Assign(<>),
  <Expression> ";" => Statement::Expression(<>),
};

Let: Let
  = <start: @L> "let" <name:Ident> "=" <init:Expression> ";" <end: @R>
  => Let { name, init, range: start..end };

Assign: Assign
  = <start: @L> <target:Ident> "=" <value:Expression> ";" <end: @R>
  => Assign { target, value, range: start..end };

Expression: Expression = {
  Ident => Expression::Ident(<>),
  NatLiteral => Expression::NatLiteral(<>),
  Block => Expression::Block(<>),
  Fn => Expression::Fn(<>),
};

Ident: Ident = <start: @L> <i:r"[A-Za-z]+"> <end: @R>
  => Ident { value: i.to_string(), range: start..end };

NatLiteral: NatLiteral = <start: @L> <nat:r"[0-9][0-9_]*"> <end: @R>
  => NatLiteral {
    value: u32::from_str(nat).unwrap(),
    range: start..end,
  };

Block: Block
  = <start: @L> "{" <statements:Statement*> <last:Expression?> "}" <end: @R>
  => Block {
    statements,
    last: last.map(Box::new),
    range: start..end,
  };

Fn: Fn
  = <start: @L> "(" <parameters:Comma<Ident>> ")" "=>" <body:Expression> <end: @R>
  => Fn {
    parameters,
    body: Box::new(body),
    range: start..end,
  };

Comma<T>: Vec<T> = {
  <mut v:(<T> ",")*> <e:T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
};
