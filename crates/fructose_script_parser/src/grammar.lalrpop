use std::str::FromStr;
use crate::ast::*;

grammar;

pub FructoseScript: Module = ModuleItem* => Module {
  items: <>,
};

ModuleItem: ModuleItem = {
  Statement => ModuleItem::Statement(<>),
};

Statement: Statement = {
  Let => Statement::Let(<>),
  Assign => Statement::Assign(<>),
  <Expression> ";" => Statement::Expression(<>),
};

Let: Let = "let" <name:Ident> "=" <init:Expression> ";" => Let { name, init };

Assign: Assign = <target:Ident> "=" <value:Expression> ";" => {
  Assign { target, value }
};

Expression: Expression = {
  Ident => Expression::Ident(<>),
  NatLiteral => Expression::NatLiteral(<>),
  Block => Expression::Block(<>),
};

Ident: Ident = <i:r"[A-Za-z]+"> => Ident { value: i.to_string() };

NatLiteral: NatLiteral = r"[0-9][0-9_]*" => NatLiteral {
  value: u32::from_str(<>).unwrap(),
};

Block: Block = "{" <statements:Statement*> <last:Expression?> "}" => {
  Block { statements, last: last.map(Box::new) }
};
